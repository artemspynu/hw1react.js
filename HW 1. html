<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Домашнее задание №1</title>
</head>
<body>
<script>
    "use strict";

    /*1. Написать функцию loop, которая будет принимать параметры: times (значение по умолчанию = 0), callback (значение
    по умолчанию = null) и будет в цикле (times раз), вызывать функцию callback. Если функция не передана, то цикл не
    должен отрабатывать ни разу. Покажите применение этой функции. */

    function loop(times = 0, callback = null) {
        if (typeof callback === "function") {
            for (let i = 0; i > times; i++) {
                callback();
            }
        }
    }

    loop(10, () => console.log('Hello!'));

    /*2. Написать функцию calculateArea, которая будет принимать параметры для вычисления площади (можете выбрать
    конкретную фигуру или, основываясь на переданных параметрах, выполнять требуемый алгоритм вычисления площади для
    переданной в параметрах фигуры) и возвращать объект вида: { area, figure, input } (где area – вычисленная площадь,
    figure – название фигуры, для которой вычислялась площадь, input – входные параметры, по которым было произведено
    вычисление.*/

    function calculateArea(figure) {
        if (!(figure instanceof Figure)) {
            return {};
        }

        let {type: type, ...input} = figure;

        return {
            figure: type,
            area: figure.getArea(),
            input: input
        }
    }

    class Figure {
        constructor(type) {
            this.type = type
        }

        getArea() {
            return Rectangle;
        }
    }

    class Rectangle extends Figure {
        constructor(width = 0, height = 0) {
            super('rectangle');
            this.width = width;
            this.height = height;
        }

        getArea() {
            return this.width * this.height;
        }
    }

    /*3. Необходимо написать иерархию классов вида:
    Human -> Employee -> Developer
    Human -> Employee -> Manager
    Каждый Менеджер (Manager) должен иметь внутренний массив своих сотрудников (разработчиков), а также методы по
    удалению и добавлению разработчиков.
    Каждый Разработчик (Developer) должны иметь ссылку на Менеджера и методы для изменения менеджера (имеется в виду
    возможность назначить другого менеджера).
    У класса Human должны быть следующие параметры: name (строка), age (число), dateOfBirth (строка или дата).
    У класса Employee должны присутствовать параметры: salary (число), department (строка).
    В классе Human должен присутствовать метод displayInfo, который возвращает строку со всеми параметрами экземпляра
    Human. В классе Employee должен быть реализован такой же метод (displayInfo), который вызывает базовый метод и
    дополняет его параметрами из экземпляра Employee.
    Чтобы вызвать метод базового класса, необходимо внутри вызова метода displayInfo класса Employee написать:
    super.displayInfo(). Это вызовет метод disaplyInfo класс Human и вернет строку с параметрами Human.*/

    class Human {
        constructor(name, age, dateOfBirth) {
            this.name = name;
            this.age = age;
            this.dateOfBirth = dateOfBirth;
        }

        displayInfo() {
            return `${this.name} is ${this.age} years old and was born on ${this.dateOfBirth}.`;
        }
    }

    class Employee extends Human {
        constructor(name, age, dateOfBirth, salary, department) {
            super(name, age, dateOfBirth);
            this.salary = salary;
            this.department = department;
        }

        displayInfo() {
            return super.displayInfo() + ` Department: ${this.department}; salary ${this.salary}.`;
        }
    }

    class Developer extends Employee {
        constructor(name, age, dateOfBirth, salary, department) {
            super(name, age, dateOfBirth, salary, department);
            this.managerObj = {};
        }

        set manager(newValue) {
            if (newValue instanceof Employee) {
                this.managerObj = newValue;
            }
        }

        get manager() {
            return this.managerObj;
        }
    }

    class Manager extends Employee {
        constructor(name, age, dateOfBirth, salary, department) {
            super(name, age, dateOfBirth, salary, department);
            this.subordinates = [];
        }

        getSubordinate(idNum) {
            return this.subordinates[idNum];
        }

        setSubordinate(employee) {
            if (!(employee instanceof Employee)) {
                return false;
            }

            this.subordinates.push(employee);
            return true;
        }
    }

    /*4. При помощи генератора написать функцию - анкету, которая запрашивает у
    пользователя на ввод параметры и передаёт их в генератор. В конце, когда генератор
    завершается, он должен вернуть все введённые входные параметры в виде объекта.
    Этот объект нужно вывести в консоли.*/

    function* generateQuestions(questionsArray) {
        let qtty = questionsArray.length - 1;
        for (let i = 0; i < qtty; ++i) {
            yield prompt(questionsArray[i]);
        }
        return prompt('Какую музыку Вы предпочитаете?');
    }

    function asker(questionArray) {
        let generator = generateQuestions(questionArray);
        let done = false;
        let answers = {};
        let result = {};
        for (let i = 0; !done; ++i) {
            result = generator.next();
            answers['Questions' + i] = {
                'questions': questionArray[i],
                'answer': result.value
            };
            done = result.done;
        }
        return answers;
    }

    /*5. Написать цикл, который создает массив промисов. Внутри каждого промиса происходит обращение к ресурсу
    (https://jsonplaceholder.typicode.com/users/number), где вместо number подставляется число от 1 до 10.
    В итоге должно получиться 10 промисов. Следует дождаться выполнения загрузки всеми промисами и далее вывести
    массив загруженных данных.*/

    function myRequest(url, itemId, outer_resolve) {
        let xhr = new XMLHttpRequest();
        xhr.open('GET', url + itemId, true);

        xhr.timeout = 10000;
        xhr.ontimeout = function () {
            return false;
        }

        xhr.send();

        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    outer_resolve(JSON.parse(xhr.responseText));
                }
                return false;
            }
            return false;
        }
    }

    function myRequester(url, minId, maxId) {
        let resultsArray = [];
        let promiseArray = [];
        let result = {}

        promiseArray[0] = new Promise((resolve, reject) => {
            result = myRequest(url, minId, resolve);
        });

        for (let id = minId + 1, pNum = 0; id <= maxId; ++id, ++pNum) {
            promiseArray[pNum + 1] = promiseArray[pNum].then((result) => {
                resultsArray[id - 1] = result;
                return new Promise((resolve, reject) => {
                    myRequest(url, id, resolve);
                });
            });
        }
        return resultsArray;
    }

</script>

</body>
</html>